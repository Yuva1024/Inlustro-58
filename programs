[02/02, 10:19 pm] Yuvaraj: class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) return head;

        // Find the length of the list
        ListNode current = head;
        int length = 1;
        while (current.next != null) {
            current = current.next;
            length++;
        }

        // Connect the last node to the head to make it a circular list
        current.next = head;

        // Find the new head and tail
        k = k % length;
        int stepsToNewHead = length - k;
        ListNode newTail = current;
        while (stepsToNewHead-- > 0) {
            newTail = newTail.next;
        }
        ListNode newHead = newTail.next;

        // Break the circle
        newTail.next = null;

        return newHead;
    }
}
[02/02, 10:22 pm] Yuvaraj: class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        if (head == null) return head;

        ListNode first = head;
        ListNode second = head;
        ListNode current = head;

        // Move the first pointer to the k-th node
        for (int i = 1; i < k; i++) {
            first = first.next;
        }

        // Save the k-th node from the beginning
        ListNode kthFromBeginning = first;

        // Move the current pointer to the end to find the k-th node from the end
        while (current.next != null) {
            current = current.next;
            second = second.next;
        }

        // Save the k-th node from the end
        ListNode kthFromEnd = second;

        // Swap the values of the k-th nodes
        int temp = kthFromBeginning.val;
        kthFromBeginning.val = kthFromEnd.val;
        kthFromEnd.val = temp;

        return head;
    }
}
[02/02, 10:24 pm] Yuvaraj: class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

public class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode current = dummy;
        
        while (current.next != null) {
            if (current.next.val == val) {
                current.next = current.next.next;
            } else {
                current = current.next;
            }
        }
        
        return dummy.next;
    }
}
[02/02, 10:27 pm] Yuvaraj: class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

public class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return slow;
    }
}
[02/02, 10:29 pm] Yuvaraj: class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

public class MergeTwoSortedLists {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                current.next = list1;
                list1 = list1.next;
            } else {
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }

        if (list1 != null) {
            current.next = list1;
        } else {
            current.next = list2;
        }

        return dummy.next;
    }
}